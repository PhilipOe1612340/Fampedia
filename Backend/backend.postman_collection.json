{
	"info": {
		"_postman_id": "01256aa1-53c1-4012-988e-e4f2d9655c30",
		"name": "backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "administration",
			"item": [
				{
					"name": "createAccount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69f14b29-c128-47dc-95f4-9190c08178a5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"un\": \"abcd\", \"pw\": \"abcd\", \"familyName\": \"ddd\"}"
						},
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "Create Account positive example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\": \"TESTuser\", \"password\": \"TESTpassword\", \"mail\": \"test@mail.de\", \"familyname\": \"testfamily\"}"
								},
								"url": {
									"raw": "{{url}}/createAccount",
									"host": [
										"{{url}}"
									],
									"path": [
										"createAccount"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"response\": \"created succesfully\"\n}"
						}
					]
				},
				{
					"name": "createFamily",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69f14b29-c128-47dc-95f4-9190c08178a5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"{{familyName}}\"}"
						},
						"url": {
							"raw": "{{url}}/user/family/new",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"family",
								"new"
							]
						}
					},
					"response": [
						{
							"name": "Create Account positive example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\": \"TESTuser\", \"password\": \"TESTpassword\", \"mail\": \"test@mail.de\", \"familyname\": \"testfamily\"}"
								},
								"url": {
									"raw": "{{url}}/createAccount",
									"host": [
										"{{url}}"
									],
									"path": [
										"createAccount"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"response\": \"created succesfully\"\n}"
						}
					]
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69f14b29-c128-47dc-95f4-9190c08178a5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"un\": \"{{username}}\", \"pw\": \"{{password}}\"}"
						},
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "login positive example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\": \"TESTuser\", \"password\": \"TESTpassword\"}"
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n  familyID: \"abc\"\n}"
						}
					]
				},
				{
					"name": "getFamily",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/family/{{familyName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"family",
								"{{familyName}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "All user related endpoints"
		},
		{
			"name": "news",
			"item": [
				{
					"name": "news",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2aa7d5ec-f138-4574-a002-523c3a0bec62",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"url\") + \"/login\",",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"    }",
									"    }, function (err, response) {",
									"            console.log(response.json().token);",
									"            pm.environment.set(\"token\", response.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ed499a8-5930-429a-ab44-81f7be077047",
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var validator = new Ajv({logger: console});\r",
									"var schema = {\r",
									"     \"type\": \"array\",\r",
									"    \"items\": {\r",
									"            \"properties\":{\r",
									"                \"images\": {\r",
									"                   \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                        \"type\": \"string\",\r",
									"                    }\r",
									"                },\r",
									"                \"_id\": {\r",
									"                   \"type\": \"string\",\r",
									"                },\r",
									"                \"articleId\": {\r",
									"                   \"type\": \"number\",\r",
									"                },\r",
									"                \"title\": {\r",
									"                   \"type\": \"string\",\r",
									"                },\r",
									"                \"body\": {\r",
									"                   \"type\": \"string\",\r",
									"                },\r",
									"                \"date\": {\r",
									"                   \"type\": \"string\",\r",
									"                },\r",
									"                \"type\":{\r",
									"                   \"type\": \"string\",\r",
									"                },\r",
									"                \"__v\": {\r",
									"                   \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"        pm.expect(validator.validate(schema, pm.response.json())).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('set last id', function() {\r",
									"    pm.environment.set(\"id\", pm.response.json().reverse()[0].articleId); \r",
									"    console.log(pm.environment.get(\"id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "user",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/news/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"news",
								"all"
							]
						}
					},
					"response": [
						{
							"name": "Positive Example For News",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/news",
									"host": [
										"{{url}}"
									],
									"path": [
										"news"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"moments\": [\"momentID1\", \"momentID2\"]\n}"
						}
					]
				}
			],
			"description": "All endpoints related to getting \"News\" --> New Moments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "233361de-7792-49b4-8b5a-eccfdbb3ed32",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bcd69b66-ed4d-4cf8-a265-6682fa070696",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "timeline",
			"item": [
				{
					"name": "getAllMoments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2aa7d5ec-f138-4574-a002-523c3a0bec62",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"url\") + \"/login\",",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"    }",
									"    }, function (err, response) {",
									"            console.log(response.json().token);",
									"            pm.environment.set(\"token\", response.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ed499a8-5930-429a-ab44-81f7be077047",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "user",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/moment/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"moment",
								"all"
							]
						}
					},
					"response": [
						{
							"name": "getAllMoments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "familyID",
										"value": "text/plain",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/getAllMoments/",
									"host": [
										"{{url}}"
									],
									"path": [
										"getAllMoments",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"moments\": [\n    { \n    \"momentiD\": \"momentDI1\",\n    \"momenttitle\": \"title\",\n    \"momentdescription\": \"text\",\n    \"Images\": {\n        \"description\": \"string\",\n        \"imageID\": \"string\",\n        \"timestamp\": \"timestamp\"\n    }\n    \n    },\n       { \n    \"momentiD\": \"momentDI2\",\n    \"momenttitle\": \"title\",\n    \"momentdescription\": \"text\",\n    \"Images\": {\n        \"description\": \"string\",\n        \"imageID\": \"string\",\n        \"timestamp\": \"timestamp\"\n    }\n    \n    }\n    \n    \n    ]\n    \n    \n}"
						}
					]
				}
			],
			"description": "All endpoints related to the main functionality: The timeline",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "949c0acf-c600-43d5-84d1-efad8af58c3f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "930ec512-4893-4e25-ba61-081d5316c82d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "moments",
			"item": [
				{
					"name": "addMoment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a54aa578-37f5-4809-ac33-8bfd78ea5a6b",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"url\") + \"/login\",",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"    }",
									"    }, function (err, response) {",
									"            console.log(response.json().token);",
									"            pm.environment.set(\"token\", response.json().token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50cfa2dc-17a3-4166-99c2-4d5dcb91b7af",
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"        \"aritcleId\": {\r",
									"            \"type\": \"number\"\r",
									"        }\r",
									"    };\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(ajv.validate(schema, pm.response.json())).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('set id', function (err, response) {\r",
									"    pm.environment.set(\"id\", pm.response.json().articleId); \r",
									"    console.log(\"set id\", pm.environment.get(\"id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "user",
								"value": "{{username}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test1\",\n  \"description\": \"This is a test\",\n  \"date\": \"12-12-2019\"\n}"
						},
						"url": {
							"raw": "{{url}}/moment/new",
							"host": [
								"{{url}}"
							],
							"path": [
								"moment",
								"new"
							]
						}
					},
					"response": [
						{
							"name": "addMoment positive example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "token",
										"value": "{{token}}"
									},
									{
										"key": "user",
										"value": "{{username}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"New Moment\",\n  \"description\": \"Description of moment\"\n}"
								},
								"url": {
									"raw": "{{url}}/addMoment",
									"host": [
										"{{url}}"
									],
									"path": [
										"addMoment"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n  \"momentID\": \"abc\"\n}"
						}
					]
				},
				{
					"name": "editMoment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a54aa578-37f5-4809-ac33-8bfd78ea5a6b",
								"exec": [
									"const interval = setTimeout(() => {}, 2147483647);",
									"",
									"function login() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/login\",",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().token);",
									"                    pm.environment.set(\"token\", response.json().token);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"function addMoment() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/moment/new\",",
									"            method: 'POST',",
									"            header: { ",
									"                'content-type': 'application/json',",
									"                'token': pm.environment.get(\"token\"),",
									"                'user': pm.environment.get(\"username\")",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    title: \"Test1\", ",
									"                    description: \"This is a test\", ",
									"                    date: \"12-12-2019\"",
									"                })",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().momentID);",
									"                    pm.environment.set(\"momentID\", response.json().momentID);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"login()",
									"    .then(addMoment)",
									"    .then(() => clearTimeout(interval))",
									"    .catch(err => {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50cfa2dc-17a3-4166-99c2-4d5dcb91b7af",
								"exec": [
									"pm.test(\"response is ok\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"        \"aritcleId\": {\r",
									"            \"type\": \"number\"\r",
									"        }\r",
									"    };\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(ajv.validate(schema, pm.response.json())).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('set id', function (err, response) {\r",
									"    pm.environment.set(\"id\", pm.response.json().articleId); \r",
									"    console.log(\"set id\", pm.environment.get(\"id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "user",
								"value": "{{username}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Edited New Moment\",\n  \"momentdescription\": \"Edited Description of moment\",\n  \"momentID\": {{momentID}}\n}"
						},
						"url": {
							"raw": "{{url}}/moment/edit",
							"host": [
								"{{url}}"
							],
							"path": [
								"moment",
								"edit"
							]
						}
					},
					"response": [
						{
							"name": "addMoment positive example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "token",
										"value": "{{token}}"
									},
									{
										"key": "user",
										"value": "{{username}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"New Moment\",\n  \"description\": \"Description of moment\"\n}"
								},
								"url": {
									"raw": "{{url}}/addMoment",
									"host": [
										"{{url}}"
									],
									"path": [
										"addMoment"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n  \"momentID\": \"abc\"\n}"
						}
					]
				},
				{
					"name": "delete Moment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c8a71b02-276b-4230-892e-8381559d4f81",
								"exec": [
									"const interval = setTimeout(() => {}, 2147483647);",
									"",
									"function login() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/login\",",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().token);",
									"                    pm.environment.set(\"token\", response.json().token);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"function addMoment() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/moment/new\",",
									"            method: 'POST',",
									"            header: { ",
									"                'content-type': 'application/json',",
									"                'token': pm.environment.get(\"token\"),",
									"                'user': pm.environment.get(\"username\")",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    title: \"Should be deleted\", ",
									"                    description: \"This is a delete test\", ",
									"                    date: \"12-12-2019\"",
									"                })",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().momentID);",
									"                    pm.environment.set(\"momentID\", response.json().momentID);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"login()",
									"    .then(addMoment)",
									"    .then(() => clearTimeout(interval))",
									"    .catch(err => {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "user",
								"value": "{{username}}"
							},
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"momentID\": {{momentID}}\n}"
						},
						"url": {
							"raw": "{{url}}/moment/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"moment",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "getMoment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2aa7d5ec-f138-4574-a002-523c3a0bec62",
								"exec": [
									"const interval = setTimeout(() => {}, 2147483647);",
									"",
									"function login() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/login\",",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().token);",
									"                    pm.environment.set(\"token\", response.json().token);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"function addMoment() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/moment/new\",",
									"            method: 'POST',",
									"            header: { ",
									"                'content-type': 'application/json',",
									"                'token': pm.environment.get(\"token\"),",
									"                'user': pm.environment.get(\"username\")",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    title: \"One pretty moment\", ",
									"                    description: \"This is a moment test\", ",
									"                    date: \"12-12-2019\"",
									"                })",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().momentID);",
									"                    pm.environment.set(\"momentID\", response.json().momentID);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"login()",
									"    .then(addMoment)",
									"    .then(() => clearTimeout(interval))",
									"    .catch(err => {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ed499a8-5930-429a-ab44-81f7be077047",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "user",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"momentID\": {{momentID}}\n}"
						},
						"url": {
							"raw": "{{url}}/moment/oneMoment",
							"host": [
								"{{url}}"
							],
							"path": [
								"moment",
								"oneMoment"
							]
						}
					},
					"response": [
						{
							"name": "getMoment",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "momentID",
										"type": "text",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{url}}/getMoment/{{MomentID}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"getMoment",
										"{{MomentID}}",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"moments\":\n    { \n    \"momentiD\": \"momentDI1\",\n    \"momenttitle\": \"title\",\n    \"momentdescription\": \"text\",\n    \"Images\": {\n        \"description\": \"string\",\n        \"imageID\": \"string\",\n        \"timestamp\": \"timestamp\"\n    }\n    \n    }\n}"
						}
					]
				},
				{
					"name": "addComment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c050b78-adbd-4622-83ca-451608b33742",
								"exec": [
									"const interval = setTimeout(() => {}, 2147483647);",
									"",
									"function login() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/login\",",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().token);",
									"                    pm.environment.set(\"token\", response.json().token);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"function addMoment() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/moment/new\",",
									"            method: 'POST',",
									"            header: { ",
									"                'content-type': 'application/json',",
									"                'token': pm.environment.get(\"token\"),",
									"                'user': pm.environment.get(\"username\")",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    title: \"One pretty moment\", ",
									"                    description: \"This is a moment test\", ",
									"                    date: \"12-12-2019\"",
									"                })",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().momentID);",
									"                    pm.environment.set(\"momentID\", response.json().momentID);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"login()",
									"    .then(addMoment)",
									"    .then(() => clearTimeout(interval))",
									"    .catch(err => {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "user",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"desc\": \"This is a test comment\"\n}"
						},
						"url": {
							"raw": "{{url}}/moment/{{momentID}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"moment",
								"{{momentID}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getComments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e1423bf-6e4b-4a55-bddf-9918267f17b3",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"url\") + \"/login\",",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"    }",
									"    }, function (err, response) {",
									"            console.log(response.json().token);",
									"            pm.environment.set(\"token\", response.json().token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "user",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/moment/{{momentID}}/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"moment",
								"{{momentID}}",
								"comments"
							]
						}
					},
					"response": []
				}
			],
			"description": "Everything direcetly related to moments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7c0539a9-40aa-4afa-bd19-37502f117e4b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "101e34fc-8361-4265-8297-2abdfb1aaff7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "momentImages",
			"item": [
				{
					"name": "delete image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c8a71b02-276b-4230-892e-8381559d4f81",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"url\") + \"/login\",",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"    }",
									"    }, function (err, response) {",
									"            console.log(response.json().token);",
									"            pm.environment.set(\"token\", response.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "user",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/momentimage/deleteImage/5cd6c773bf651217df38314d",
							"host": [
								"{{url}}"
							],
							"path": [
								"momentimage",
								"deleteImage",
								"5cd6c773bf651217df38314d"
							]
						}
					},
					"response": []
				},
				{
					"name": "getMomentImage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2aa7d5ec-f138-4574-a002-523c3a0bec62",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ed499a8-5930-429a-ab44-81f7be077047",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/momentimage/getImage/340/5cd6d7a27639621c2b887cfc",
							"host": [
								"{{url}}"
							],
							"path": [
								"momentimage",
								"getImage",
								"340",
								"5cd6d7a27639621c2b887cfc"
							]
						}
					},
					"response": []
				},
				{
					"name": "addMomemtImage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "57783840-1f23-49a4-9704-09b29a516ea7",
								"exec": [
									"const interval = setTimeout(() => {}, 2147483647);",
									"",
									"function login() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/login\",",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().token);",
									"                    pm.environment.set(\"token\", response.json().token);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"function addMoment() {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"url\") + \"/moment/new\",",
									"            method: 'POST',",
									"            header: { ",
									"                'content-type': 'application/json',",
									"                'token': pm.environment.get(\"token\"),",
									"                'user': pm.environment.get(\"username\")",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    title: \"Test1\", ",
									"                    description: \"This is a test\", ",
									"                    date: \"12-12-2019\"",
									"                })",
									"            }",
									"            }, function (err, response) {",
									"                if (err) {",
									"                    console.log(err);",
									"                    reject();",
									"                } else {",
									"                    console.log(response.json().momentID);",
									"                    pm.environment.set(\"momentID\", response.json().momentID);",
									"                    resolve();",
									"                }",
									"        });",
									"    });",
									"}",
									"",
									"login()",
									"    .then(addMoment)",
									"    .then(() => clearTimeout(interval))",
									"    .catch(err => {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "user",
								"value": "{{username}}"
							},
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "desc",
								"value": "test"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/Users/christiancoenen/Desktop/fampedia/Backend/test/testImage.jpg"
								}
							]
						},
						"url": {
							"raw": "{{url}}/momentimage/addimage/{{momentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"momentimage",
								"addimage",
								"{{momentID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Everything related to images of each moment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "58d21b74-5f77-4bab-b054-dd107df88a69",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "54287619-029e-4d6f-9f23-654f091fed7d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "logs",
			"item": [
				{
					"name": "getLogs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/logs",
							"host": [
								"{{url}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"response": []
				},
				{
					"name": "clearLogs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/logs/clear",
							"host": [
								"{{url}}"
							],
							"path": [
								"logs",
								"clear"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "QRCode",
			"item": [
				{
					"name": "getQRCode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0c108087-d005-481f-8a86-9a65ff2c2d52",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"url\") + \"/login\",",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({un: pm.environment.get(\"username\"), pw: pm.environment.get(\"password\")})",
									"    }",
									"    }, function (err, response) {",
									"            console.log(response.json().token);",
									"            pm.environment.set(\"token\", response.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "user",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/QRCode",
							"host": [
								"{{url}}"
							],
							"path": [
								"QRCode"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "34568c46-9013-4be8-b0f5-73d76ffd6c7f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46dcda74-52a2-4f09-ae99-29a6a56b5f59",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}